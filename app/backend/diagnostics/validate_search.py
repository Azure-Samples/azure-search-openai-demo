"""
Validaci√≥n de configuraci√≥n de Azure Search
"""

import os

# Cargar variables de entorno autom√°ticamente
try:
    from .env_loader import load_env_file
except ImportError:
    # Fallback para ejecuci√≥n directa
    import sys
    sys.path.append(os.path.dirname(__file__))
    from env_loader import load_env_file

try:
    from .utils_logger import log_ok, log_error, log_info
except ImportError:
    # Fallback para ejecuci√≥n directa
    def log_ok(msg): print("‚úÖ " + msg)
    def log_error(msg): print("‚ùå " + msg)
    def log_info(msg): print("üîç " + msg)

def validate_search_config():
    """Valida la configuraci√≥n de Azure Search"""
    log_info("[SEARCH] Validando configuraci√≥n de Azure Search...")
    
    # Variables requeridas para Azure Search
    required_vars = [
        "AZURE_SEARCH_SERVICE",
        "AZURE_SEARCH_INDEX", 
        "AZURE_SEARCH_SERVICE_RESOURCE_GROUP"
    ]
    
    # Variables opcionales
    optional_vars = [
        "AZURE_SEARCH_SEMANTIC_RANKER",
        "AZURE_SEARCH_FIELD_NAME_EMBEDDING",
        "SEARCH_ENDPOINT",
        "SEARCH_INDEX"
    ]
    
    all_good = True
    
    print("  Variables requeridas de Search:")
    for var in required_vars:
        val = os.getenv(var)
        if val:
            print(f"    {var}: ‚úÖ {val}")
        else:
            print(f"    {var}: ‚ùå No definida")
            all_good = False
    
    print("  Variables opcionales:")
    for var in optional_vars:
        val = os.getenv(var)
        if val:
            print(f"    {var}: ‚úÖ {val}")
        else:
            print(f"    {var}: ‚ö†Ô∏è No definida (opcional)")
    
    # Intentar conectividad b√°sica (si las variables est√°n disponibles)
    search_endpoint = os.getenv("SEARCH_ENDPOINT") or os.getenv("AZURE_SEARCH_ENDPOINT")
    if search_endpoint:
        try:
            import requests
            # Ping b√°sico al endpoint
            response = requests.get(f"{search_endpoint}/", timeout=10)
            if response.status_code == 200:
                print(f"    Conectividad: ‚úÖ Endpoint responde")
            else:
                print(f"    Conectividad: ‚ö†Ô∏è C√≥digo {response.status_code}")
        except Exception as e:
            print(f"    Conectividad: ‚ùå Error: {str(e)[:100]}")
    
    if all_good:
        print("  SEARCH: ‚úÖ Configuraci√≥n completa")
        return 0
    else:
        print("  SEARCH: ‚ùå Faltan variables requeridas")
        return 1

if __name__ == "__main__":
    exit(validate_search_config())

import os
try:
    from .utils_logger import log_ok, log_error, log_info
except ImportError:
    # Fallback para ejecuci√≥n directa
    def log_ok(msg): print("‚úÖ " + msg)
    def log_error(msg): print("‚ùå " + msg)
    def log_info(msg): print("üîç " + msg)

def validate_search_config():
    """Valida configuraci√≥n de Azure Search"""
    log_info("[SEARCH] Validando configuraci√≥n de Azure Search...")
    
    # Variables requeridas para Azure Search
    required_vars = [
        "AZURE_SEARCH_SERVICE",
        "AZURE_SEARCH_INDEX",
        "AZURE_SEARCH_SERVICE_RESOURCE_GROUP"
    ]
    
    # Variables opcionales
    optional_vars = [
        "AZURE_SEARCH_KEY",
        "AZURE_SEARCH_SEMANTIC_RANKER",
        "AZURE_SEARCH_FIELD_NAME_EMBEDDING"
    ]
    
    all_good = True
    
    print("  Variables requeridas:")
    for var in required_vars:
        val = os.getenv(var)
        if val:
            print(f"    {var}: ‚úÖ {val}")
        else:
            print(f"    {var}: ‚ùå No definida")
            all_good = False
    
    print("  Variables opcionales:")
    for var in optional_vars:
        val = os.getenv(var)
        if val:
            print(f"    {var}: ‚úÖ {val}")
        else:
            print(f"    {var}: ‚ö†Ô∏è No definida (opcional)")
    
    # Construir endpoint si es posible
    search_service = os.getenv("AZURE_SEARCH_SERVICE")
    if search_service:
        endpoint = f"https://{search_service}.search.windows.net"
        print(f"    Endpoint calculado: {endpoint}")
    
    if all_good:
        print("  SEARCH: ‚úÖ Configuraci√≥n completa")
        return 0
    else:
        print("  SEARCH: ‚ùå Faltan variables requeridas")
        return 1

def test_search_connection():
    """Prueba conexi√≥n real con Azure Search (requiere credenciales)"""
    try:
        from azure.search.documents import SearchClient
        from azure.identity import DefaultAzureCredential
        
        search_service = os.getenv("AZURE_SEARCH_SERVICE")
        search_index = os.getenv("AZURE_SEARCH_INDEX")
        
        if not search_service or not search_index:
            print("    ‚ùå Variables de Search no configuradas")
            return 1
            
        endpoint = f"https://{search_service}.search.windows.net"
        credential = DefaultAzureCredential()
        
        search_client = SearchClient(
            endpoint=endpoint,
            index_name=search_index,
            credential=credential
        )
        
        # Hacer una b√∫squeda de prueba
        results = search_client.search("test", top=1)
        list(results)  # Consumir el iterador
        
        print("    ‚úÖ Conexi√≥n con Azure Search exitosa")
        return 0
        
    except Exception as e:
        print(f"    ‚ùå Error conectando con Azure Search: {str(e)}")
        return 1

if __name__ == "__main__":
    result = validate_search_config()
    if result == 0:
        result = test_search_connection()
    exit(result)
